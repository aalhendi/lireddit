type AlreadyExistsError implements Error {
  fieldName: String!
  message: String!
}

type BaseError implements Error {
  message: String!
}

interface Error {
  message: String!
}

type InvalidCredentialsError implements Error {
  message: String!
}

type LengthError implements Error {
  fieldName: String!
  message: String!
  minLength: Int!
}

type Mutation {
  changePassword(
    """New password"""
    newPassword: String!

    """UUID Reset Token"""
    token: String!
  ): MutationChangePasswordResult!
  createPost(
    """Content"""
    content: String

    """Title"""
    title: String!
  ): MutationCreatePostResult!
  deletePost(
    """ID"""
    id: Int!
  ): MutationDeletePostResult!
  forgotPassword(
    """E-mail address"""
    email: String!
  ): MutationForgotPasswordResult!
  login(
    """E-mail Adress"""
    email: String!

    """Password"""
    password: String!
  ): MutationLoginResult!
  logout: Boolean!
  register(
    """E-mail Adress"""
    email: String!

    """Name"""
    name: String

    """Password"""
    password: String!
  ): MutationRegisterResult!
  updatePost(
    """Content"""
    content: String

    """ID"""
    postId: Int!

    """Title"""
    title: String!
  ): MutationUpdatePostResult!
  vote(
    """Post ID"""
    postId: Int!

    """Upvote(True) or Downvote(False)"""
    value: Boolean!
  ): MutationVoteResult!
}

union MutationChangePasswordResult = MutationChangePasswordSuccess | NotFoundError | ZodError

type MutationChangePasswordSuccess {
  data: User!
}

union MutationCreatePostResult = BaseError | MutationCreatePostSuccess | NotFoundError

type MutationCreatePostSuccess {
  data: Post!
}

union MutationDeletePostResult = BaseError | MutationDeletePostSuccess | NotFoundError | UnauthorizedError

type MutationDeletePostSuccess {
  data: Boolean!
}

union MutationForgotPasswordResult = MutationForgotPasswordSuccess | ZodError

type MutationForgotPasswordSuccess {
  data: Boolean!
}

union MutationLoginResult = InvalidCredentialsError | MutationLoginSuccess | ZodError

type MutationLoginSuccess {
  data: User!
}

union MutationRegisterResult = AlreadyExistsError | MutationRegisterSuccess | ZodError

type MutationRegisterSuccess {
  data: User!
}

union MutationUpdatePostResult = BaseError | MutationUpdatePostSuccess | NotFoundError | UnauthorizedError

type MutationUpdatePostSuccess {
  data: Post!
}

union MutationVoteResult = BaseError | MutationVoteSuccess | NotFoundError

type MutationVoteSuccess {
  data: Boolean!
}

type NotFoundError implements Error {
  fieldName: String!
  message: String!
}

type PaginatedPosts {
  data(
    """Pointer to start from"""
    cursor: ID

    """Number of posts to fetch"""
    limit: Int!
  ): PaginatedPostsDataResult!
  hasMore: Boolean!
}

union PaginatedPostsDataResult = BaseError | PaginatedPostsDataSuccess

type PaginatedPostsDataSuccess {
  data: [Post!]!
}

type Post {
  author: User!
  content: String
  id: ID!
  points: Int!
  title: String!
}

type Query {
  me: User
  ping: String!
  post(
    """ID"""
    id: Int!
  ): QueryPostResult!
  posts(
    """Pointer to start from"""
    cursor: ID

    """Number of posts to fetch"""
    limit: Int!
  ): PaginatedPosts!
}

union QueryPostResult = BaseError | NotFoundError | QueryPostSuccess

type QueryPostSuccess {
  data: Post!
}

type UnauthorizedError implements Error {
  message: String!
}

type User {
  email: String!
  id: ID!
  name: String
}

type ZodError implements Error {
  fieldErrors: [ZodFieldError!]!
  message: String!
}

type ZodFieldError {
  message: String!
  path: [String!]!
}